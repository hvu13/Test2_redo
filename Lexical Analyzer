/* This Lexical Analyzer can recognize the following tokens, based on the rules given in the problem: variables, integer literals, keywords, mathematical and relational operators, and punctuation symbols. Each token is assigned a unique token code which is used by the Syntax Analyzer to recognize the tokens and form a syntax tree. */

#include<stdio.h>
#include<string.h>

#define MAX_LEN 100

int main(){
    char str[MAX_LEN];
    int i, j,  k;
    int token_code;
    int state;
    
    //Scanning input string
    printf("Enter the string: ");
    scanf("%s", str);
    
    i = 0;
    state = 0;
    
    while(str[i] != '\0')
    {
        switch(state)
        {
            case 0:
                if(str[i] == '_' || (str[i] >= 'a' && str[i] <= 'z'))
                {
                    state = 1;
                }
                else if(str[i] >= '0' && str[i] <= '9')
                {
                    state = 2;
                }
                else if(str[i] == '+' || str[i] == '-' || str[i] == '*' || str[i] == '/' || str[i] == '%' || str[i] == '<' || str[i] == '>' || str[i] == '=')
                {
                    state = 3;
                }
                else if(str[i] == '(' || str[i] == ')' || str[i] == ';' || str[i] == '{' || str[i] == '}')
                {
                    state = 4;
                }
                else
                {
                    state = 5;
                }
                break;
                
            case 1:
                if(str[i] == '_' || (str[i] >= 'a' && str[i] <= 'z') || (str[i] >= '0' && str[i] <= '9'))
                {
                    state = 1;
                }
                else
                {
                    state = 6;
                }
                break;
                
            case 2:
                if(str[i] >= '0' && str[i] <= '9')
                {
                    state = 2;
                }
                else
                {
                    state = 6;
                }
                break;
                
            case 3:
                if(str[i] == '=')
                {
                    state = 7;
                }
                else
                {
                    state = 6;
                }
                break;
                
            default:
                state = 5;
        }
        i++;
    }
    
    //Assigning token codes
    if(state == 1)
    {
        token_code = 10;
    }
    else if(state == 2)
    {
        token_code = 11;
    }
    else if(state == 3)
    {
        token_code = 12;
    }
    else if(state == 4)
    {
        token_code = 13;
    }
    else if(state == 7)
    {
        token_code = 14;
    }
    else
    {
        token_code = 0;
    }
    
    printf("\nToken code = %d\n", token_code);
    return 0;
}
