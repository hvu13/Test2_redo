/* This Syntax Analyzer uses the token codes generated by the Lexical Analyzer to form a syntax tree. For this language, the following rules are used: 
1. Assignment statement: <variable> = <expression>;
2. Mathematical expression: <operand> <operator> <operand>
3. Relational expression: <operand> <relational operator> <operand>
4. Loop statement: while <condition> { <statement>* }
5. Selection statement: if <condition> { <statement>* }
*/

#include<stdio.h>

typedef struct Node{
    int token_code;
    char* token_value;
    struct Node *left;
    struct Node *right;
} Node;

int main(){
    Node *root;
    int token_code;
    char *token_value;
    int i;
    
    //Scanning token codes and values
    printf("Enter the token codes and values: \n");
    for(i = 0; i < 10; i++){
        scanf("%d %s", &token_code, token_value);
        
        Node *node = (Node*)malloc(sizeof(Node));
        node->token_code = token_code;
        node->token_value = token_value;
        node->left = NULL;
        node->right = NULL;
        root = node;
    }
    
    //Creating the syntax tree
    if(root->token_code == 10){
        //Assignment statement
        Node *node = (Node*)malloc(sizeof(Node));
        node->token_code = 10;
        node->token_value = root->token_value;
        node->left = root->left;
        root->left = node;
    }
    else if(root->token_code == 12){
        //Mathematical expression
        Node *node = (Node*)malloc(sizeof(Node));
        node->token_code = 12;
        node->token_value = root->token_value;
        node->left = root->left;
        node->right = root->right;
        root->left = node;
    }
    else if(root->token_code == 14){
        //Relational expression
        Node *node = (Node*)malloc(sizeof(Node));
        node->token_code = 14;
        node->token_value = root->token_value;
        node->left = root->left;
        node->right = root->right;
        root->left = node;
    }
    else if(root->token_code == 13 && root->right->token_code == 10){
        //Loop statement
        Node *node = (Node*)malloc(sizeof(Node));
        node->token_code = 13;
        node->token_value = root->token_value;
        node->left = root->left;
        node->right = root->right;
        root->left = node;
    }
    else if(root->token_code == 13 && root->right->token_code == 14){
        //Selection statement
        Node *node = (Node*)malloc(sizeof(Node));
        node->token_code = 13;
        node->token_value = root->token_value;
        node->left = root->left;
        node->right = root->right;
        root->left = node;
    }
    
    //Printing the syntax tree
    printf("\nSyntax tree: \n");
    printf("%s\n", root->token_value);
    printf("  %s\n", root->left->token_value);
    if(root->right != NULL){
        printf("  %s\n", root->right->token_value);
    }
    if(root->right->right != NULL){
        printf("    %s\n", root->right->right->token_value);
    }
    if(root->right->right->right != NULL){
        printf("      %s\n", root->right->right->right->token_value);
    }
    return 0;
}
